#include "obj/map.h"

#include <stdlib.h>
#include "gfx.h"
#include "obj.h"
#include "system.h"
#include "md/megadrive.h"

const uint16_t *g_map_data;  // Cast from map->current_map->map_data
const g_map_row_size;  // Set to 40 * map->current_map->w
static O_Map *map;

#define TILESET_ASSETS(name) { res_gfx_fg_##name##_bin,\
                               sizeof(res_gfx_fg_##name##_bin),\
                               res_pal_fg_##name##_bin,\
                               sizeof(res_pal_fg_##name##_bin) }

#define MAP_ASSETS(name) { res_map_##name##_bin,\
                           sizeof(res_map_##name##_bin)

// LUT representing the data needed for a given tileset ID.
typedef struct TilesetAssets
{
	const uint8_t *tile_data;
	unsigned int tile_data_size;
	const uint8_t *pal_data;
	unsigned int pal_data_size;
} TilesetAssets;

static const TilesetAssets tileset_by_id[] =
{
	[0] = TILESET_ASSETS(00_outside1),
	[1] = TILESET_ASSETS(01_outside2),
	[2] = TILESET_ASSETS(02_inside1),
	[3] = TILESET_ASSETS(03_sandy1),
	[4] = TILESET_ASSETS(04_teleporter),
	[5] = TILESET_ASSETS(05_outside3),
	[6] = TILESET_ASSETS(06_purplezone),
	[7] = TILESET_ASSETS(07_rooftop),
	[8] = TILESET_ASSETS(08_technozone),
};

// LUT for map data by ID
typedef struct MapAssets
{

} MapAssets;

static const MapAssets map_by_id[] =
{
	[0] = MAP_ASSETS(00_roomzero),
	[1] = MAP_ASSETS(01_startroom),
	[2] = MAP_ASSETS(02_sidesquare),
	[3] = MAP_ASSETS(03_teleroom),
	[4] = MAP_ASSETS(04_lefttall),
	[5] = MAP_ASSETS(05_plantroom),
	[6] = MAP_ASSETS(06_earlycorridor),
	[7] = MAP_ASSETS(07_cownspikes),
	[8] = MAP_ASSETS(08_liftget),
	[9] = MAP_ASSETS(09_earlybumps),
	[10] = MAP_ASSETS(10_smallchamber),
	[11] = MAP_ASSETS(11_zigzag),
	[12] = MAP_ASSETS(12_jumpget),
	[13] = MAP_ASSETS(13_lavatower),
	[14] = MAP_ASSETS(14_ballhall),
	[15] = MAP_ASSETS(15_kickblock),
	[16] = MAP_ASSETS(16_pillatower),
	[17] = MAP_ASSETS(17_buggozone),
	[18] = MAP_ASSETS(18_poweruptower),
	[19] = MAP_ASSETS(19_boingotele),
	[20] = MAP_ASSETS(20_undersand),
	[21] = MAP_ASSETS(21_spikeshelf),
	[22] = MAP_ASSETS(22_kickget),
	[23] = MAP_ASSETS(23_cowzone),
	[24] = MAP_ASSETS(24_smallghetto),
};

static void main_func(Obj *o)
{
	(void)o;
}

void o_load_map(Obj *o, uint16_t data)
{
	SYSTEM_ASSERT(sizeof(O_Map) <= sizeof(ObjSlot));
	(void)data;

	if (map) return;
	map = (O_Map *)o;
	g_map_data = NULL;

	obj_basic_init(o, OBJ_FLAG_ALWAYS_ACTIVE, 0, 0, 0, 1);
	o->main_func = main_func;
	o->cube_func = NULL;

	pal_upload(24, res_bg_common_pal, sizeof(res_bg_common_pal) / 2);
}

void o_unload_map(void)
{
	map = NULL;
}

// Public functions -----------------------------------------------------------

// Load a map by ID number. In particular:
// * Sets the current map pointer
// * Populates the object list with entities from the map file ( --> lyle.c )
// * Sets the BG based on map file (--> bg.c )
// * Queues DMA for the sprite, enemy palettes
// * Queues DMA for the tileset
void map_load(uint8_t id)
{
	map->current_map = 

	pal_upload(BG_COMMON_CRAM_POSITION, res_pal_bg_common_bin,
	           sizeof(res_pal_bg_common_bin) / 2);

}
